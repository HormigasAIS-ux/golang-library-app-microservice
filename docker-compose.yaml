version: '3.8'

services:
  backend_syn_db:
    image: postgres:13
    container_name: backend_syn_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    restart: always

  # AUTH SERVICE
  syn_auth_service_rest:
    image: ${AUTH_SERVICE_IMAGE}
    build:
      context: ./auth_service
    container_name: syn_auth_service_rest
    command: ["./auth_service", "--server=rest"]
    ports:
      - "8001:8001"
    networks:
      - my_network
    env_file:
      - ./auth_service/.env
    depends_on:
      backend_syn_db:
        condition: service_healthy
    restart: always


  syn_auth_service_grpc:
    image: ${AUTH_SERVICE_IMAGE}
    build:
      context: ./auth_service
    container_name: syn_auth_service_grpc
    command: ["./auth_service", "--server=grpc"]
    ports:
      - "7001:7001"
    networks:
      - my_network
    env_file:
      - ./auth_service/.env
    depends_on:
      backend_syn_db:
        condition: service_healthy
    restart: always


  syn_auth_service_seed_user:
    image: ${AUTH_SERVICE_IMAGE}
    build:
      context: ./auth_service
    container_name: syn_auth_service_seed_user
    command: ["./auth_service", "--seed=user"]
    networks:
      - my_network
    env_file:
      - ./auth_service/.env
    depends_on:
      - backend_syn_db
      - syn_auth_service_grpc
      - syn_author_service_grpc

  # AUTHOR SERVICE
  syn_author_service_rest:
    image: ${AUTHOR_SERVICE_IMAGE}
    build:
      context: ./author_service
    container_name: syn_author_service_rest
    command: ["./author_service", "--server=rest"]
    ports:
      - "8002:8002"
    networks:
      - my_network
    env_file:
      - ./author_service/.env
    depends_on:
      backend_syn_db:
        condition: service_healthy
    restart: always

  syn_author_service_grpc:
    image: ${AUTHOR_SERVICE_IMAGE}
    build:
      context: ./author_service
    container_name: syn_author_service_grpc
    command: ["./author_service", "--server=grpc"]
    ports:
      - "7002:7002"
    networks:
      - my_network
    env_file:
      - ./author_service/.env
    depends_on:
      backend_syn_db:
        condition: service_healthy
    restart: always

  # BOOK SERVICE
  syn_book_service_rest:
    image: ${BOOK_SERVICE_IMAGE}
    build:
      context: ./book_service
    container_name: syn_book_service_rest
    command: ["./book_service", "--server=rest"]
    ports:
      - "8003:8003"
    networks:
      - my_network
    env_file:
      - ./book_service/.env
    depends_on:
      backend_syn_db:
        condition: service_healthy
    restart: always


  syn_book_service_grpc:
    image: ${BOOK_SERVICE_IMAGE}
    build:
      context: ./book_service
    container_name: syn_book_service_grpc
    command: ["./book_service", "--server=grpc"]
    ports:
      - "7003:7003"
    networks:
      - my_network
    env_file:
      - ./book_service/.env
    depends_on:
      backend_syn_db:
        condition: service_healthy
    restart: always

  # CATEGORY SERVICE
  syn_category_service_rest:
    image: ${CATEGORY_SERVICE_IMAGE}
    build:
      context: ./category_service
    container_name: syn_category_service_rest
    command: ["./category_service", "--server=rest"]
    ports:
      - "8004:8004"
    networks:
      - my_network
    env_file:
      - ./category_service/.env
    depends_on:
      backend_syn_db:
        condition: service_healthy
    restart: always

  syn_category_service_grpc:
    image: ${CATEGORY_SERVICE_IMAGE}
    build:
      context: ./category_service
    container_name: syn_category_service_grpc
    command: ["./category_service", "--server=grpc"]
    ports:
      - "7004:7004"
    networks:
      - my_network
    env_file:
      - ./category_service/.env
    depends_on:
      backend_syn_db:
        condition: service_healthy
    restart: always

volumes:
  postgres_data:

networks:
  my_network:
    driver: bridge
